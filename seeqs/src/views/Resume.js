import React, { useState, useEffect } from "react";
import "../styles/Resume.css";
import Taskbar from "../components/Taskbar";
import jsPDF from "jspdf";

const Resume = () => {
  const [editable, setEditable] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phoneNumber: "",
    interests: "",
    overview: "",
    education: "",
    projects: "",
    skills: "",
  });

  useEffect(() => {
    // Fetch data from the database or API and update formData
    fetchDataFromDatabase();
  }, []); // Run this effect only once when the component mounts

  const fetchDataFromDatabase = () => {
    // Replace this with actual API call or database interaction
    // For simplicity, using a dummy data fetch
    const dummyData = {
      name: "John Doe",
      email: "john.doe@example.com",
      phoneNumber: "123-456-7890",
      interests: "Web Development, Design",
      overview:
        "Experienced web developer with a passion for creating interactive and user-friendly applications.",
      education: "Bachelor of Science in Computer Science, XYZ University",
      projects: "Project 1: XYZ Project\nProject 2: ABC Project",
      skills: "JavaScript, React, HTML, CSS",
    };

    setFormData(dummyData);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleEditClick = () => {
    setEditable(true);
  };

  const handleSaveClick = () => {
    // Save data to the database or API
    saveDataToDatabase();
    setEditable(false);
  };

  const saveDataToDatabase = () => {
    // Replace this with actual API call or database interaction
    // For simplicity, using a console log to show the saved data
    console.log("Saving data to the database:", formData);
  };

  const handleDownloadPDF = () => {
    const pdf = new jsPDF();
    pdf.setFontSize(12);

    // Add header
    pdf.setFont("helvetica", "bold");
    pdf.setFontSize(18);
    pdf.text("Resume", pdf.internal.pageSize.width / 2, 20, {
      align: "center",
    });

    // Add contact information
    pdf.setFont("helvetica", "normal");
    pdf.setFontSize(12);
    pdf.text(`${formData.name}`, 20, 40);
    pdf.text(`Email: ${formData.email}`, 20, 50);
    pdf.text(`Phone: ${formData.phoneNumber}`, 20, 60);

    let currentY = 80; // Set initial Y-coordinate for the first category

    // Add sections with bold subtitles and headers
    const addCategory = (title, content) => {
      pdf.setFont("helvetica", "bold");
      pdf.text(title, 20, currentY);
      currentY += 10; // Adjust the Y-coordinate to reduce space
      pdf.setFont("helvetica", "normal");
      pdf.setFontSize(12);
      pdf.text(content, 20, currentY);
      currentY += 30; // Adjust the Y-coordinate to reduce space
    };

    addCategory("Overview", formData.overview);
    addCategory("Education", formData.education);
    addCategory("Projects", formData.projects);
    addCategory("Skills", formData.skills);

    // Add footer
    pdf.setFont("helvetica", "italic");
    pdf.setFontSize(10);
    pdf.text(
      "Generated by SEEQS",
      pdf.internal.pageSize.width / 2,
      pdf.internal.pageSize.height - 10,
      { align: "center" }
    );

    // Save the PDF with a specific name
    pdf.save("resume.pdf");
  };

  return (
    <div>
      <Taskbar />
      <div className="resume-container">
        <h1 className="resume-heading">Resume</h1>
        {editable ? (
          <button onClick={handleSaveClick} className="resume-save-btn">
            Save your resume
          </button>
        ) : (
          <>
            {" "}
            <button onClick={handleEditClick} className="resume-edit-btn">
              Edit your resume
            </button>
            <button onClick={handleDownloadPDF} className="resume-download-btn">
              Download as PDF
            </button>
          </>
        )}
        <form className="resume-form">
          <label>
            Name:
            {editable ? (
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="resume-input"
              />
            ) : (
              <div className="resume-display">{formData.name}</div>
            )}
          </label>
          <br />
          <label>
            Email:
            {editable ? (
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="resume-input"
              />
            ) : (
              <div className="resume-display">{formData.email}</div>
            )}
          </label>
          <br />
          <label>
            Phone Number:
            {editable ? (
              <input
                type="tel"
                name="phoneNumber"
                value={formData.phoneNumber}
                onChange={handleChange}
                className="resume-input"
              />
            ) : (
              <div className="resume-display">{formData.phoneNumber}</div>
            )}
          </label>
          <br />
          <label>
            Interests:
            {editable ? (
              <textarea
                name="interests"
                value={formData.interests}
                onChange={handleChange}
                className="resume-textarea"
              />
            ) : (
              <div className="resume-display">{formData.interests}</div>
            )}
          </label>
          <br />
          <label>
            Overview:
            {editable ? (
              <textarea
                name="overview"
                value={formData.overview}
                onChange={handleChange}
                className="resume-textarea"
              />
            ) : (
              <div className="resume-display">{formData.overview}</div>
            )}
          </label>
          <label>
            Education:
            {editable ? (
              <textarea
                name="education"
                value={formData.education}
                onChange={handleChange}
                className="resume-textarea"
              />
            ) : (
              <div className="resume-display">{formData.education}</div>
            )}
          </label>
          <br />
          <label>
            Projects:
            {editable ? (
              <textarea
                name="projects"
                value={formData.projects}
                onChange={handleChange}
                className="resume-textarea"
              />
            ) : (
              <div className="resume-display">{formData.projects}</div>
            )}
          </label>
          <br />
          <label>
            Skills:
            {editable ? (
              <textarea
                name="skills"
                value={formData.skills}
                onChange={handleChange}
                className="resume-textarea"
              />
            ) : (
              <div className="resume-display">{formData.skills}</div>
            )}
          </label>
        </form>
      </div>
    </div>
  );
};
export default Resume;
